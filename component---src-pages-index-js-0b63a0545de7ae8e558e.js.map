{"version":3,"sources":["webpack:///./src/lib/line.ts","webpack:///./src/lib/util.ts","webpack:///./src/components/text/TextContainer.tsx","webpack:///./src/components/text/index.tsx","webpack:///./src/components/lineblock.tsx","webpack:///./src/components/viewer.js","webpack:///./src/pages/index.js"],"names":["LineContext","createContext","line","useLine","useContext","lineSection","data","type","mapVishraams","apiVishraams","source","sourceVishraams","indeces","map","p","Number","length","split","word","index","includes","indexOf","t","splitLine","BaseTextContainer","className","children","GurmukhiTextContainer","RomanText","VishraamText","vishraams","lineID","key","Pangtee","id","Translation","Teeka","LineBlock","verse","translation","visraam","verseId","baniDBTranslation","en","bdb","baniDBTeeka","pu","gurmukhi","TextNodes","idx","TextNode","DisplayNode","Provider","value","Viewer","query","IndexPage","verses","banidb","bani","keywords","description","title"],"mappings":"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","file":"component---src-pages-index-js-0b63a0545de7ae8e558e.js","sourcesContent":["import {createContext, useContext} from 'react'\n\nconst LineContext = createContext( {line: ''} )\n\nexport {LineContext}\n\nconst useLine = () => {\n  const {line} = useContext( LineContext )\n\n  return [ line ]\n}\n\nexport {useLine}\n","type LineSections = {type: string, data: string}[]\nexport type VishraamSource = \"sttm\" | \"sttm2\" | \"ig\";\n\nexport type Vishraam = {\n  t: VishraamSource;\n  p: number | string;\n}\nexport type ApiVishraams = {\n  [key in VishraamSource]: Vishraam[];\n}\n\n\nconst lineSection = ( data: string, type: string ) =>  ( {type: type, data:data} ) \n\nconst splitLine = ( line: string, indeces:number[], sourceVishraams: Vishraam[] ): LineSections => (\n  line.split( ' ' ).map( ( word, index ) => {\n    const isIndexed = indeces.includes( index )\n    const type = isIndexed ? sourceVishraams[ indeces.indexOf( index ) ].t : 'line'\n    return lineSection( `${word} `, type )\n  } )\n )\nconst mapVishraams = ( line: string, apiVishraams: ApiVishraams, source: VishraamSource ): LineSections => {\n  const sourceVishraams = apiVishraams?.[ source ] ?? []\n  const indeces = sourceVishraams.map( ( {p} ) => Number( p ) )\n\n  return ( indeces.length ) ? splitLine( line, indeces, sourceVishraams ) : [ lineSection( line, 'line' ) ]\n}\n\nexport { mapVishraams}\n\nconst range = ( start:number, end: number ): number[] => Array.from( {length: end - start}, ( _, i ) => i + start )\nexport {range}\n","import React, {ReactNode} from 'react'\n\ninterface ContainerProps {\n  className: string;\n  children?: ReactNode;\n}\n\n\nconst BaseTextContainer: React.FC<ContainerProps> = ( {className, children } ) => (\n  <div className={className}>\n    {children}\n  </div>\n)\n\nconst GurmukhiTextContainer: React.FC<ContainerProps> = ( {children, className} ) => (\n  <BaseTextContainer className={`${className} font-gurbani `}>\n      {children}\n  </BaseTextContainer>\n)\n\nexport {BaseTextContainer, GurmukhiTextContainer}\n","import React from 'react'\nimport {useLine} from '../../lib/line'\nimport {ApiVishraams, VishraamSource, mapVishraams} from '../../lib/util'\nimport {BaseTextContainer, GurmukhiTextContainer} from './TextContainer'\n\n\nconst RomanText = () => {\n  const [ line ] = useLine()\n\n  return (\n    <span className=\"font-sm\">{line}</span>\n  )\n}\n\n\ninterface VishraamsProps {\n  vishraams?: ApiVishraams;\n  source: VishraamSource;\n  lineID?: number;\n  className?: string;\n}\nconst VishraamText: React.FC<VishraamsProps> = ( {vishraams, source, lineID, className} ) => {\n  const [ line ] = useLine()\n  return (\n    <div className={className}>\n      {mapVishraams( line, vishraams, source ).map( ( {data, type}, index ) => \n        <span key={`${lineID}-${index}`} className={`pangtee-${type}`}>{data}</span>\n       )}\n      </div>\n  )\n}\n\nexport {RomanText, VishraamText, BaseTextContainer, GurmukhiTextContainer}\n","import React, {ReactNode} from 'react'\nimport {GurmukhiTextContainer, VishraamText, BaseTextContainer, RomanText} from './text'\nimport {LineContext} from '../lib/line'\n\n\nconst Pangtee = ( {id, vishraams, source} ) => (\n  <GurmukhiTextContainer className=\"text-2xl\">\n    <VishraamText vishraams={vishraams} source={source} lineID={id} /> \n    </GurmukhiTextContainer>\n)\n\nconst Translation = () => (\n  <BaseTextContainer className=\"text-sm\">\n      <RomanText />\n    </BaseTextContainer>\n)\nconst Teeka = () => (\n  <GurmukhiTextContainer className=\"text-sm\">\n    <RomanText />\n    </GurmukhiTextContainer>\n)\n\nconst LineBlock = ( {line} ) => {\n  const {verse, translation, visraam, verseId} = line\n  const baniDBTranslation = translation.en.bdb\n  const baniDBTeeka = translation.pu.bdb.gurmukhi\n\n  const TextNodes: [ReactNode, [string, boolean]][] = [\n    [ <Pangtee id={verseId} vishraams={visraam} source={\"sttm\"} key={`${verseId}-pangtee`}/>, [ verse.gurmukhi, true ] ],\n    [ <Translation key={`${verseId}-translation`}/>, [ baniDBTranslation, !!baniDBTranslation ] ],\n    [ <Teeka  key={`${verseId}-teeka`}/>, [ baniDBTeeka, !!baniDBTeeka ] ]\n  ]\n\n  return (\n    <div key={`${verseId}-lineblock`}>\n      {TextNodes.map( ( [ TextNode, [ line, toDisplay ] ], idx ) => {\n        const DisplayNode = !!toDisplay && TextNode\n\n        return (\n          <LineContext.Provider value={{line: line}} key={`${line}-${idx}`}>\n            {DisplayNode}\n          </LineContext.Provider>\n        )\n      } )}\n    </div>\n  )\n\n}\n\n\nexport {LineBlock}\n","import React, {useState} from 'react'\n\nimport {Virtuoso} from 'react-virtuoso'\nimport {LineBlock} from './lineblock'\n\nconst ROWCOUNT = 1091\n\nconst Viewer = ( {data} ) => {\n  return (\n    <div className=\"m-3\">\n    {data.map( line => <LineBlock key={line.verse} line={line.verse} /> )}\n    </div>\n  )  \n}\nexport {Viewer}\n","import {graphql} from 'gatsby'\nimport React from 'react'\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport {Viewer} from \"../components/viewer\"\n\nconst IndexPage = ( {data} ) => {\n  const { banidb: { bani: { verses } } } = data\n  return (\n    <Layout>\n      <SEO\n        keywords={[ `AkalUstat`, `akalustat`, `dasam bani`, `dasam granth`, 'sri dasam granth sahib', 'dasam sri guru granth sahib' ]}\n        description=\"Sri Akal Ustat bani from Sri Dasam Guru Granth Sahib\"\n        title=\"AkalUstat\"\n      />\n\n      <section className=\"text-center items-stretch\">\n        <Viewer data={verses} />\n      </section>\n    </Layout>\n  )\n}\n\nexport default IndexPage\nexport const query =     graphql`\n    query AkalUstat {\n  banidb {\n    bani(id: \"29\") {\n      verses {\n        verse {\n          verse {\n            gurmukhi\n          }\n          verseId\n          visraam {\n            sttm {\n              p\n              t\n            }\n          }\n          translation {\n            en {\n              bdb\n            }\n            pu {\n              bdb {\n                gurmukhi\n              }\n            }\n          }\n          transliteration {\n            en\n          }\n        }\n      }\n    }\n  }\n}\n\n`\n\n"],"sourceRoot":""}